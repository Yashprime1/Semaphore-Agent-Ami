name: Build-Semaphore-Agent-Ami

on:
  workflow_dispatch:
    inputs:
      Region:
        description: "AWS Region"
        required: false
        default: "eu-west-1"
      iam_instance_profile:
        description: "IAM Instance Profile"
        required: false
        default: "System-SharedResources-PackerEc2InstanceIamProfile-sTs5SePHjF83"

jobs:
  build-default-semaphore-agent-ami:
    runs-on: ubuntu-latest
    outputs:
      default_ami_id: ${{ steps.get_ami_id.outputs.ami_id }}
    steps:
      - name: Checkout agent-aws-stack repo
        uses: actions/checkout@v4
        with:
          repository: renderedtext/agent-aws-stack
          show-progress: 'false'

      - name: Setup packer
        uses: hashicorp/setup-packer@v3.1.0
        with:
          version: 1.8.1

      - name: Build default agent AMI
        id: build_default_ami
        run: |
          set -eo pipefail
          make packer.init
          make packer.build.linux INSTALL_ERLANG=false AMI_INSTANCE_TYPE=t2.micro AMI_ARCH=x86_64 AWS_REGION=${{ github.event.inputs.Region || 'eu-west-1' }} AMI_PREFIX=semaphore-agent-${{ github.run_id }} TOOLBOX_VERSION=v1.26.0 UBUNTU_VERSION=noble | tee packer_output.log
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ github.event.inputs.Region || 'eu-west-1' }}

      - name: Get default AMI ID
        id: get_ami_id
        if: always()
        run: |
          AMI_ID=$(grep -oP 'ami-[a-z0-9]+' packer_output.log | tail -1)
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT

  build-variants:
    needs: build-default-semaphore-agent-ami
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          show-progress: 'false'

      - name: Setup packer
        uses: hashicorp/setup-packer@v3.1.0
        with:
          version: 1.8.1

      - name: Build both agent variants (with-tools, with-tools-ultron)
        id: build_variants
        run: |
          set -eo pipefail
          packer init semaphore-agent-ami/packer-semaphore-agent-variant.pkr.hcl
          packer build -var "default_agent_ami=${{ needs.build-default-semaphore-agent-ami.outputs.default_ami_id }}" -var "aws_region=${{ github.event.inputs.Region }}" -var "iam_instance_profile=${{ github.event.inputs.iam_instance_profile }}" semaphore-agent-ami/packer-semaphore-agent-variant.pkr.hcl | tee packer_variants_output.log
        env:
          AWS_DEFAULT_REGION: ${{ github.event.inputs.Region }}
          AWS_ACCESS_KEY_ID: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}


      - name: Output AMI IDs 
        if: always()
        run: |
          echo "with-tools AMI: $(grep -A1 'with-tools\.amazon-ebs\.with-tools:' packer_variants_output.log | tail -1 | awk '{print $2}')"
          echo "with-tools-ultron AMI: $(grep -A1 'with-tools-ultron\.amazon-ebs\.with-tools-ultron:' packer_variants_output.log | tail -1 | awk '{print $2}')"


  cleanup-elastic-agent-packer-resources:
    needs: build-variants
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Elastic agent packer resources
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "will terminate the resources here..."
          instance_ids=$(aws ec2 describe-instances --region  eu-west-1 --filters "Name=tag:packer-name,Values=semaphore-agent-ami-builder" "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].InstanceId" --output text)
          for instance_id in $instance_ids; do
            echo "Processing instance ID: $instance_id"
            values=$(aws ec2 describe-tags --region eu-west-1 --filters "Name=resource-id,Values=$instance_id" --query "Tags[?Key=='instance-id' || Key=='security-group' || Key=='key-pair'].Value" --output text)
            if [ -n "$values" ]; then
              echo "Values are not empty: $values"
              aws ec2 terminate-instances --instance-ids "$instance_id" --region eu-west-1
              aws ec2 wait instance-terminated --instance-ids "$instance_id" --region eu-west-1
              key_pair_name=$(echo "$values" | awk '{print $2}')
              aws ec2 delete-key-pair --key-name $key_pair_name --region eu-west-1
              sg_name=$(echo "$values" | awk '{print $3}')
              security_group_id=$(aws ec2 describe-security-groups --region eu-west-1 --filters "Name=group-name,Values=$sg_name" --query "SecurityGroups[0].GroupId" --output text)
              aws ec2 delete-security-group --group-id "$security_group_id" --region eu-west-1
              echo "terminated"
            else
              echo "Values are empty or not found."
            fi
          done
          echo "Script completed."
